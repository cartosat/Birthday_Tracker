"""
Django settings for BirthDayTracker project.

Generated by 'django-admin startproject' using Django 3.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9o0&6g&rv)&9nmp#g!!9y#n-o08(x2objugyw=mhbja=8zm(gb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'UserAuth.apps.UserauthConfig',
    'BirthDayManager.apps.BirthdaymanagerConfig',
    'phonenumber_field',
    'rest_framework',
    'Api'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

AUTH_USER_MODEL = 'UserAuth.CustomUser'
DATE_INPUT_FORMATS = ['%d-%b-%Y']
PHONENUMBER_DEFAULT_REGION = "IN"
ROOT_URLCONF = 'BirthDayTracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates"),
                 os.path.join(BASE_DIR, "UserAuth/templates")
                 ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BirthDayTracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "UserAuth/static"),
    os.path.join(BASE_DIR, "static"),
]

STATIC_ROOT = os.path.join(BASE_DIR, "assets")

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    # The version number of our log
    'disable_existing_loggers': False,
    # Formatter
    'formatters': {
        'verbose' : {
            'format' : '{asctime} : {levelname} : {name} : {threadName} {thread:d} {module} {filename} {lineno:d} {name} {funcName} {process:d} {message}',
            'style' : '{',
        },
        'simple': {
            'format' : '{asctime} : {levelname} : {name} : {filename} : {lineno:d} : {funcName} : {message}',
            'style': '{',
        },
        'console-data': {
            'format' : '{asctime} : {levelname} : {filename}#{lineno:d} - {message}',
            'style': '{',
        },
    },

    # Handlers
    'handlers': {
        'console_handler' : {
            'class': 'logging.StreamHandler',
            'formatter' : 'console-data',
            'level': 'DEBUG'
        },
        'error_handler': {
            'class' : 'logging.handlers.RotatingFileHandler',
            'filename' : os.path.join(BASE_DIR, 'logs', 'debug.log'),
            'mode' : 'a',
            'formatter' : 'simple',
            'level' : 'WARNING',
            'backupCount' : 5,
            'maxBytes' : 1024 * 1024 * 5,  # 5 MB
        },
        'fileDebug': {
            'level': 'DEBUG',
            'formatter' : 'simple',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'debug.log'),
        },
        'fileInfo': {
            'level': 'INFO',
            'formatter' : 'simple',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'info.log'),
        },
        'fileWarning': {
            'level': 'WARNING',
            'formatter' : 'simple',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'warning.log'),
        },
        'fileError': {
            'level': 'ERROR',
            'formatter' : 'simple',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'error.log'),
        },
        'fileCritical': {
            'level': 'CRITICAL',
            'formatter' : 'simple',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'critical.log'),
        },
    },
    'loggers': {
       # notice the blank '', Usually you would put built in loggers like django or root here based on your needs
        'django.server': {
            'handlers': ['console_handler', 'error_handler', 'fileDebug', 'fileInfo', 'fileWarning', 'fileError', 'fileCritical'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}